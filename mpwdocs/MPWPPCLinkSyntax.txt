PPCLink         # link a PowerPC application, tool, shared library or static libraryPPCLink [option…] file… ≥ progress    -ac n                   # align code modules on n-byte (minimum) boundaries    -ad n                   # align data modules on n-byte (minimum) boundaries    -blocksize n            # set I/O buffer size to n*512 bytes    -c resType              # set output file creator    -codeorder source | reference | staticcall | segment | file=fileName                            # order how routines are written to the output file                            #    source     = same order as in input files                            #    reference  = A calls B & C, B calls D, then A,B,C,D                            #    staticcall = A calls B & C, B calls D, then A,B,D,C                            #    segment    = order routines by segments (default)                            #    file       = order routines as specified in text file                            # Use of this option might improve the performance of the                             # linked application/shared library.    -codestart n            # set the base address of the .text/code section    -d                      # suppress warnings for all duplicate symbol definitions    -datastart n            # set the base address of the data section    -dead on | off          # exclude unused code and data from the output file                            # default value depends on value of -xm flag as follows:                            #    -xm executable      -dead on                            #    -xm sharedlibrary   -dead on                            #    -xm library         -dead off    -@export fileName       # export symbols specified in text file, one symbol per line    -export name[,name]…    # export the specified symbols    -exportglue on | off    # generate glue for exported routines (default: on)    -@filelist fileName     # link files specified in text file, one filename per line    -fragname name          # set PEF container fragment name (default: name of output file)    -h[elp]                 # display this help info    -@ignoredups fileName   # suppress warnings for duplicate symbols specified in text file, one symbol per line    -ignoredups name[,name]…# suppress warnings for the specified duplicate symbols    -init default | none | name                            # set initialization entry point                            # default entry point depends on value of -xm flag as follows:                            #    -xm executable        __init_app                            #    -xm sharedlibrary     __init_lib                            #    -xm library           no init entry point    -initbefore name[,name]…# mark the specified import libraries as "init before"                            # note - this option takes fragment names not file names    -librename old=new      # rename import libraries                            # note - this option takes fragment names not file names    -linkfaster on | off    # space/time tradeoff (default: on for faster, uses more space)    -m[ain] name            # set main entry point (default: __start)    -map fileName           # write link map to specified file    -[no]mf                 # [don't] use temporary memory (default: mf)    -o fileName             # set output file name (default: PPCLink.out)    -outputformat default | pef | xcoff                            # set output format                            # default value depends on value of -xm flag as follows:                            #    -xm executable        -outputformat pef                            #    -xm sharedlibrary     -outputformat pef                            #    -xm library           -outputformat xcoff                            # executables and shared libraries can be "xcoff" or "pef"                            # static libraries can only be "xcoff"    -p                      # write progress information to diagnostics    -packdata on | off      # compress the data section (default: on)    -profile on |           # enable collection of profiling/performance info at runtime       off |                # disable profiling (default)       exclude=name[,name]… # exclude specified routines from profiling    -rodatais data | code | constant                            # place read-only data in the specified section (default: data)    -roistext on | off      # place read-only data in the .text/code section (default: off)                            # The default is "off" because the .text/code section is                            # not write-protected at runtime.    -sg newSeg=old[,old]…   # merge old segments into newSeg    -share context | global | protected                            # set the sharing mode for the data section                            #    context   = shared within a context (default)                            #    global    = shared across all contexts                            #    protected = readable by all contexts, writeable by privileged contexts    -sym on|off|big|nobig   # include debug symbols (default: off)                            # use -sym big if -sym on runs out of memory    -t resType              # set output file type    -term default | none | name                            # set termination entry point                            # default entry point depends on value of -xm flag as follows:                            #    -xm executable        __term_app                            #    -xm sharedlibrary     __term_lib                            #    -xm library           no termination entry point    -tocdataref on | off    # optimize runtime calculations of data addresses (default: on)                            #   Edit instructions, converting "lzw" to "addi"                            #   when the TOC entry being loaded is the address                            #   of a variable within ±32k of the TOC anchor.                            #   This optimization improves the performance of the                            #   linked application/shared library by avoiding a                            #   memory reference at runtime.    -uf fileName            # report unused code and data symbols to specified file    -unmangle on | off      # unmangle C++ symbols in link map and messages (default: on)    -v                      # verbose progress (implies -p)    -vercur n               # set PEF container "current version" to n (default: 0)    -verdef n               # set PEF container "definition version" to n (default: 0)    -verimp n               # set PEF container "implementation version" to n (default: 0)    -w[arn]                 # suppress warning messages    -@weak fileName         # mark imports specified in text file as "weak", one import per line    -weak name[,name]…      # mark the specified imports as "weak"    -weaklib name[,name]…   # mark the specified import libraries as "weak"                            # note - this option takes fragment names not file names    -xm e[xecutable] |      # generate an application or tool (default)        l[ibrary] |         # generate a static library        s[haredlibrary] |   # generate a shared library        d[ropin]            # generate a drop-in addition