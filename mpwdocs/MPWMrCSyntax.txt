MrC              # C Compiler for Macintosh On RISCMrC [option…] file    -alias off              # Disable pointer alias analysis (default)    -alias [addr]           # Enable pointer alias analysis by distinct address           [,ansi]          # Enable pointer alias analysis by ANSI rules           [,type]          # Enable pointer alias analysis by data type    -align power            # specify power alignment for data structures (default)    -align mac68k           # specify 68K alignment for data structures    -align byte | packed    # use byte alignment for data structures    -alloca                 # recognize 'alloca' as a built in function    -ansi off               # don't enforce strict ANSI compatibility (see the Symantec C/C++ for MPW                            #  Users Guide.)    -ansi on | relaxed      # size of enums is determined by minimum size needed to                            #   store the enum values. The following keywords will not                            #   be recognized: “__handle”, “_inf”, “__nan”, “__nans”,                            #   “__machdl”, “asm”, and “pascal”. (See MrC/MrCpp Release                             #   Notes for complete list of features and restrictions.)     -ansi strict            # same as -ansi on, but size of enums is always an int    -asm                    # generate an assembly listing of the generated code    -char signed            # treat char type as signed (default)    -char unsigned          # treat char type as unsigned    -char unsignedx         # treat char type as unsigned, and sign extend the values    -c                      # Syntax check only.  No XCOFF file is generated.    -curdir                 # use current (working) directory for the compiler temporary                            #   and output files.  The -y option has precedence over the -currdir option.    -d[efine] name          # define a preprocessing symbol. Equivalent to #define name 1.    -d[efine] name=value    # define a preprocessing symbol. Equivalent to #define name value.    -dump[c] filename       # save the state of the compilation in the specified file    -e                      # if -l is specified, show macro expansions in listing    -enum int               # use int-sized enumeration types    -enum min               # use minimum-sized enumeration types, same as 68K (default unless -ansi strict is on)    -exceptions on | off    # enable/disable exception handling (default off)    -export_list filename   # specify the file which contains a list of the shared library's exported entry points                            #  (used in conjunction with -shared_lib_export). default: <source filename>.x    -fatext                 # add “.ppc.o” extension to object filename instead of “.o”    -fp_contract on         # generate multiply-add-fused instructions (default)    -maf on                 #    "               "             "           "    -fp_contract off        # don't generate multiply-add-fused instructions    -maf off                #   "      "               "             "    -i pathname[,pathname…] # search for include files in directory specified by pathname    -ieee relaxed | strict  # control strict adherence to IEEE floating point semantics    -ignorepragma id,…      # ignore #pragmas with the specified #pragma id's    -inclpath normal | std  # treat <...> includes as system includes              | standard    #   "     "      "      "   "       "    -inclpath ignoresys |   # treat <...> includes exactly like "..." includes              ignoresystem |#   "     "      "        "      "    "       "              nosys |       #   "     "      "        "      "    "       "              nosystem      #   "     "      "        "      "    "       "    -includes mac |         # controls how to interpret #include pathnames (mac is default)              dos |         #   convert DOS pathnames to Mac pathnames              unix          #   convert Unix pathnames to Mac pathnames    -inline all             # functions are inlined wherever possible, regardless of cost     -inline on              # functions are inlined as defined in the C++ source (default)     -inline none | off      # inlining of C++ function expansions will be suppressed    -inline 0 | 1 | 2 | 3 | # sets complexity limit on functions to be inlined.            4 | 5           #    -ir pathname[,…]        # recursively search for include files in directory specified by pathname    -j0                     # accept two byte sequences for Japanese    -j1                     # accept two byte sequences for Taiwanese or Chinese    -j2                     # accept two byte sequences for Korean    -l filename             # generates a listing to the specified file (need -e for macro expansions)    -ldsize 64 | 128        # determines the size of long doubles (default = 64)      -load[c] filename       # restore the state of the compilation from the specified file    -longlong off           # disable support of long long types    -longlong on            # support long long types (default)    -make filename          # generate Make dependency rules into the specified file    -noMapCR                # changes the default mapping of \n to 0x0A and \r to 0x0D    -notOnce                # allow multiple copies of header files    -o filename | dirname:  # specify output filename or directory    -opt off                # suppress all optimizations (default with -sym on)    -opt local              # perform local optimizations (default with -sym off)    -opt size               # optimize for size       [,warn_uninit]       #   warn about variables which are definitly used before being set       [,warn_maybe_uninit] #   warn about variables which may used before set       [,ok_to_reduce_opt]  #   warn about reducing optimization level due to low memory    -opt speed              # optimize for speed       [,unroll]            #   as above, plus loop unrolling       [,unswitch]          #   as above, apply loop unswitching       [,norep]             #   as above, but do not repeatedly apply global copy propagation                            #     and redundant store elimination       [,nointer]           #   as above, but no interprocedural optimizations       [,warn_uninit]       #   warn about variables which are definitly used before being set       [,warn_maybe_uninit] #   warn about variables which may used before set       [,ok_to_reduce_opt]  #   warn about reducing optimization level due to low memory    -p                      # output progress information to the standard error file    -poolstringsbyfunc      # string constants are associated with their functions instead of compilation unit    -prefix pathname        # #include the specified file(s) prior to reading the first source file.               [,pathname…] #    -proto strict           # require function prototypes    -proto auto             # automatically generate function prototypes (default)    -shared_lib_export on   # create a shared library and create file that contains entry point list    -shared_lib_export off  # don't create shared library (default)    -sym off                # disable generation of symbolic debugging information (default)    -sym on | full          # enable generation of symbolic debugging information        [,nolines]          #   omit source line information        [,notypes]          #   omit type information        [,novars]           #   omit variable information        [,alltypes]         #   generate type information for all types (including unreferenced types)    -t                      # display compilation time    -target ppc | powerpc   # generate code for PowerPC architecture    -target power           # generate code for Power architecture    -target 601             # generate code for PowerPC 601    -target 603             # generate code for PowerPC 603    -target 604             # generate code for PowerPC 604    -tb on                  # generate IBM RS/6000 traceback tables (same as -traceback)    -tb pragma              # generate IBM RS/6000 traceback tables only for #pragma traceback functions     -tb exp[ort]            # generate IBM RS/6000 traceback tables only for #pragma export functions    -tb outofline           # generate IBM RS/6000 traceback tables only for #pragma outofline functions    -traceback              # generate IBM RS/6000 traceback tables    -typecheck strict       # perform strict type checking (default).    -typecheck relaxed      # perform relaxed type checking    -u all                  # #undef all predefined non-ANSI macros    -u name[,…]             # #undef name, where name is a predefined non-ANSI macro name    -unique_strings         # force all string constants to be unique    -vec[tor] off           # do not accept vector functions and types (default)    -vec[tor] on            # accept vector functions and types      [,vrsave |            #   maintain VRsave in prologs and epilogs (default if -vector on)       ,novrsave]           #   do not maintain VRsave in prologs and epilogs    -w off                  # suppress all warnings    -w [is]err[or]          # treat warnings as errors    -w n1[,n2…]             # suppress the specified warning messages    -x                      # continue past the normal maximum error limit (4)    -y directory            # write compiler temporary and object files to directory (default:same as source file)